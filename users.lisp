(in-package #:reform)

(defclass user (reform-base-class)
  ((username :initform nil :initarg :username :accessor get-username :index t)
   (password :initform nil :initarg :password :accessor get-password)
   (email  :initarg :email :accessor get-email :initform nil)
   (capabilities :initform '() :accessor get-capabilities :index t)
   (liked :initform '() :accessor get-liked)
   (disliked :initform '() :accessor get-disliked)
   (messages :initform '() :accessor get-messages)
   (old-messages :initform '() :accessor get-old-messages))
  (:metaclass ele:persistent-metaclass))

(defun get-admins ()
  (remove-if-not (lambda (u)
		   (has-capability? u 'admin))
		 (ele:get-instances-by-class 'user)))

(defun add-capability (user capability)
  (pushnew capability (get-capabilities user)))

(defun remove-capability (user capability)
  (with-slots (capabilities) user
    (setf (get-capabilities user)
	  (remove capability capabilities))))

(defun has-capability? (user capability)
  (let ((capabilities (get-capabilities user)))
    (or (member 'admin capabilities)
	(member capability capabilities))))

(defun has-capability* (capability)
  (and (boundp 'hunchentoot:*session*) hunchentoot:*session*
       (hunchentoot:session-value 'user)
       (has-capability? (hunchentoot:session-value 'user) capability)))

(defun get-user-by-name (username)
  (ele:get-instance-by-value 'user 'username username))

(defun get-user ()
  (when (and (boundp 'hunchentoot:*session*)
	     hunchentoot:*session*) 
    (when-bind (user (hunchentoot:session-value 'user))
	       user)))


(defun maybe-get-user (username password)
  (when-bind (user (ele:get-instance-by-value 'user 'username username))
    (when (string-equal password (get-password user))
      user)))

(defun try-to-log-user-in (username password)
  (if-bind (user (maybe-get-user username password))
	   (progn (hunchentoot:start-session)
		  (setf (hunchentoot:session-value 'user) user))
	   (setf (hunchentoot:return-code*) hunchentoot:+http-forbidden+)))

(defun user-pane (stream)
  (format stream "~A" (print-menu))
  (when-bind (user (hunchentoot:session-value 'user))
	     (with-html-output (s stream)
	       ((:p :align "right" :style "font-size:120%")
		"logged in as " (:b (str (get-username user))) " | "
		(let ((len (length (get-messages user))))
		  (html (fmt "~:D new <a href=/messages>message~:P</a>" len)))
		 " | "
		((:a :href "/logout.html") "log out")
		(if (has-capability* 'admin)
		    (htm (:br) ((:a :href "/new.html?type=user") "new user")
			 " | " ((:a :href "/edit-users.html") "edit users")))
		(if (has-capability* 'poster)
		    (htm (:br) (fmt "Post new ~{~A~^, ~}."
				    (mapcar (lambda (type)
					      (with-html-output-to-string (s)
						((:a :href (url-rewrite:add-get-param-to-url "/new.html" "type" type))
						    (str type))))
					       (list "article" "news" "debate" "tag" "person")))) )))))


(hunchentoot:define-easy-handler (login-page :uri "/login.html")
    (username password (rnumber :parameter-type 'integer) rtype)
  (when (and username password)
    (when (try-to-log-user-in username password)
      (when (and (get-valid-type rtype) rnumber)
	(when-bind (obj (ele:get-instance-by-value (get-valid-type rtype) 'instance-id rnumber))
		   (hunchentoot:redirect (get-url obj))))
      (hunchentoot:redirect "/welcome.html")))
  (with-standard-page (:title "Log in to reform.ie")
    ((:div :class "span-11 colborder")
     ((:h2 :class "alt") "Log in")
     ((:form :method "post" :enctype "multipart/form-data" :action "/login.html")
      (:table
       (:tr (:td ((:label :for "username") "Username"))
	    (:td (:input :type "text" :name "username")))
       (:tr (:td ((:label :for "password") "Password"))
	    (:td (:input :type "password" :name "password"))))
      (when (and rnumber rtype)
	(htm (:input :type "hidden" :name "rnumber" :value rnumber)
	     (:input :type "hidden" :name "rtype" :value rtype)))
      (:input :type "submit" :name "submit" :value "log in")))
    
    
    ((:div :class "span-12 last")
     ((:h2 :class "alt") "Register a new account")
     ((:form :method "post" :enctype "multipart/form-data" :action "/register.html")
      (:table
       (:tr (:td ((:label :for "username") "Username"))
	    (:td (:input :type "text" :name "username")))
       (:tr (:td ((:label :for "password") "Password"))
	    (:td (:input :type "password" :name "password")))
       (:tr (:td ((:label :for "password2") "Please type your password again"))
	    (:td (:input :type "password" :name "password2")))
       (:tr (:td ((:label :for "email") "Email (optional)"))
	    (:td (:input :type "text" :name "email"))))
      (when (and rnumber rtype)
	(htm (:input :type "hidden" :name "rnumber" :value rnumber)
	     (:input :type "hidden" :name "rtype" :value rtype)))
      (:input :type "submit" :name "submit" :value "Register")))))

(defun login-form ()
  (html ((:h2 :class "alt") "Log in or " ((:a :onclick "javascript:toggle_login_forms();" :href "#")
					   "Join up"))
	 ((:form :method "post" :enctype "multipart/form-data" :action "/login.html")
	  (:table
	   (:tr (:td ((:label :for "username") "Username"))
		(:td (:input :type "text" :name "username")))
	   (:tr (:td ((:label :for "password") "Password"))
		(:td (:input :type "password" :name "password"))))
	  (:input :type "submit" :name "submit" :value "log in"))))

(defun registration-form ()
  (html ((:h2 :class "alt") ((:a :onclick "javascript:toggle_login_forms();" :href "#")
			     "Log in") " or Join up")
	((:form :method "post" :enctype "multipart/form-data" :action "/register.html")
	 (:table
	  (:tr (:td ((:label :for "username") "Username"))
	       (:td (:input :type "text" :name "username")))
	  (:tr (:td ((:label :for "password") "Password"))
	       (:td (:input :type "password" :name "password")))
	  (:tr (:td ((:label :for "password2") "Please type your password again"))
	       (:td (:input :type "password" :name "password2")))
	  (:tr (:td ((:label :for "email") "Email (optional)"))
	       (:td (:input :type "text" :name "email"))))
	 (:input :type "submit" :name "submit" :value "Register"))))

(defun make-new-user (username password)
  (let ((user (make-instance 'user :username username :password password)))
    (push (make-welcome-message) (get-messages user))
    user))


(hunchentoot:define-easy-handler (register :uri "/register.html")
    (username password password2 email (rnumber :parameter-type 'integer) rtype)
  (let ((messages '()))
    (when (and username password password2)
      (if (get-user-by-name username)
	  (push "Username already taken.  Please choose another." messages)
	  (if (string-equal password password2)
	      (let ((user (make-new-user username password)))
		(when email (setf (get-email user) email))
		(try-to-log-user-in username password)
		(when (and (get-valid-type rtype) rnumber)
		  (when-bind (obj (ele:get-instance-by-value (get-valid-type rtype) 'instance-id rnumber))
			     (hunchentoot:redirect (get-url obj))))
		(hunchentoot:redirect "/welcome.html"))
	      (push "Passwords do not match" messages))))
    (with-standard-page (:title "Register")
      ((:div :class "span-12")
       (str (registration-form)))
      ((:div :class "span-12 last")
       (when messages
	 (htm ((:div :class "error")
	       (:ul (dolist (m messages) (htm (:li (str m))))))))))))


(hunchentoot:define-easy-handler (logout-page :uri "/logout.html")
    ()
  (when (and hunchentoot:*session*
	     (hunchentoot:session-value 'user))
    (hunchentoot:delete-session-value 'user)
    (hunchentoot:remove-session hunchentoot:*session*))
  (hunchentoot:redirect "/welcome.html"))

(hunchentoot:define-easy-handler (edit-users :uri "/edit-users.html")
    ()
  (unless (has-capability* 'admin)
    (setf (hunchentoot:return-code*) hunchentoot:+http-forbidden+))
  (with-standard-page (:title "Edit users")
    ((:div :class "span-24 last")
     (:ul (dolist (u (ele:get-instances-by-class 'user))
	    (htm (:li ((:a :href (format nil "/edit.html?instance-id=~A&type=user"
			 (get-id u)))
		       "[ edit ]") (str (get-username u)))))))))
